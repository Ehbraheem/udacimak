import {
  API_ENDPOINTS_UDACITY_GRAPHQL,
} from '../config';
import { fetchApiUdacityGraphql } from '.';


/**
 * Fetch User information from Udacity API
 * @param {string} udacityAuthToken Udacity authentication token
 */
export default function fetchUdacityUserInfo(udacityAuthToken) {
  const queryGraphql = '{"query":"\\n    query UserBaseQuery {\\n      user {\\n        \\n  affiliate_program_key\\n  can_edit_content\\n  email\\n  first_name\\n  id\\n  is_email_verified\\n  is_phone_number_verified\\n  last_name\\n  nickname\\n  phone_number\\n  preferred_language\\n  right_to_access\\n  social_logins {\\n    provider\\n    id\\n  }\\n  \\n  settings {\\n    skip_classroom_welcome\\n    dismissed_upgrade_ids\\n    onboarding_completed_keys\\n    nanodegree_feedback_viewed_counts\\n    account_delete_state\\n    nanodegree_feedback_share_click_keys\\n    nanodegree_feedback_share_viewed_counts\\n  }\\n\\n\\n        nanodegrees: enrollments(start_index: 0, states: [ENROLLED, STATIC_ACCESS], semantic_types: [NANODEGREE], order: [last_viewed_at]) {\\n          \\n  id\\n  key\\n  locale\\n  state\\n  version\\n  version_limit\\n  includes_knowledge_reviews\\n  includes_student_hub\\n  is_ready_for_graduation\\n  root_node {\\n    locale\\n    version\\n    semantic_type\\n  }\\n\\n          \\n  static_access {\\n    access_expiry_at\\n  }\\n  service_model_id\\n  includes_personal_mentor\\n  includes_knowledge_reviews\\n  includes_student_hub\\n  includes_welcome_flow\\n  attributes\\n  schedule {\\n    hidden\\n  }\\n\\n          node: root_node {\\n            \\n  id\\n  key\\n  locale\\n  version\\n\\n            \\n  semantic_type\\n  title\\n  user_state {\\n    last_viewed_at\\n  }\\n\\n          }\\n        }\\n        graduated_nanodegrees: enrollments(start_index: 0, states: [GRADUATED], semantic_types: [NANODEGREE], order: [last_viewed_at]) {\\n          \\n  id\\n  key\\n  locale\\n  state\\n  version\\n  version_limit\\n  includes_knowledge_reviews\\n  includes_student_hub\\n  is_ready_for_graduation\\n  root_node {\\n    locale\\n    version\\n    semantic_type\\n  }\\n\\n          node: root_node {\\n            \\n  id\\n  key\\n  locale\\n  version\\n\\n          }\\n        }\\n        courses: enrollments(start_index: 0, states: [ENROLLED], semantic_types: [COURSE], order: [last_viewed_at]) {\\n          \\n  id\\n  key\\n  locale\\n  state\\n  version\\n  version_limit\\n  includes_knowledge_reviews\\n  includes_student_hub\\n  is_ready_for_graduation\\n  root_node {\\n    locale\\n    version\\n    semantic_type\\n  }\\n\\n          node: root_node {\\n            \\n  id\\n  key\\n  locale\\n  version\\n\\n            \\n  semantic_type\\n  title\\n  user_state {\\n    last_viewed_at\\n  }\\n\\n          }\\n        }\\n        graduated_courses: enrollments(start_index: 0, states: [GRADUATED], semantic_types: [COURSE], order: [last_viewed_at]) {\\n          \\n  id\\n  key\\n  locale\\n  state\\n  version\\n  version_limit\\n  includes_knowledge_reviews\\n  includes_student_hub\\n  is_ready_for_graduation\\n  root_node {\\n    locale\\n    version\\n    semantic_type\\n  }\\n\\n          node: root_node {\\n            \\n  id\\n  key\\n  locale\\n  version\\n\\n          }\\n        }\\n        parts: enrollments(start_index: 0, states: [ENROLLED], semantic_types: [PART], order: [last_viewed_at]) {\\n          \\n  id\\n  key\\n  locale\\n  state\\n  version\\n  version_limit\\n  includes_knowledge_reviews\\n  includes_student_hub\\n  is_ready_for_graduation\\n  root_node {\\n    locale\\n    version\\n    semantic_type\\n  }\\n\\n          node: root_node {\\n            \\n  id\\n  key\\n  locale\\n  version\\n\\n            \\n  semantic_type\\n  title\\n  user_state {\\n    last_viewed_at\\n  }\\n\\n          }\\n        }\\n        graduated_parts: enrollments(start_index: 0, states: [GRADUATED], semantic_types: [PART], order: [last_viewed_at]) {\\n          \\n  id\\n  key\\n  locale\\n  state\\n  version\\n  version_limit\\n  includes_knowledge_reviews\\n  includes_student_hub\\n  is_ready_for_graduation\\n  root_node {\\n    locale\\n    version\\n    semantic_type\\n  }\\n\\n          node: root_node {\\n            \\n  id\\n  key\\n  locale\\n  version\\n\\n          }\\n        }\\n      }\\n    }\\n  ","variables":null,"locale":"en-gb"}';

  return fetchApiUdacityGraphql(API_ENDPOINTS_UDACITY_GRAPHQL, queryGraphql, udacityAuthToken);
}
